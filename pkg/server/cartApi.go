package cartApi

import (
	"fmt"
	"github.com/gofiber/fiber/v2"
	"github.com/jinzhu/gorm"
	"strconv"
)

type Svr struct {
	Database *gorm.DB
}

// CartItem represents an item in the cart
type CartItem struct {
	ID        int     `json:"id"`         // Cart item ID (autogenerated)
	UserID    int     `json:"user_id"`    // User ID
	ItemID    int     `json:"item_id"`    // Menu item ID
	Quantity  int     `json:"quantity"`   // Quantity of the item
	ItemName  string  `json:"item_name"`  // Menu item name
	ItemPrice float64 `json:"item_price"` // Price per item
}

// AddToCart handles adding items to the cart
func (s *Svr) AddToCart(c *fiber.Ctx) error {
	userID := c.FormValue("user_id")
	itemID := c.FormValue("item_id")
	quantity := c.FormValue("quantity")

	// Validate and convert input
	userIDInt, err := strconv.Atoi(userID)
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status": "!OK",
			"result": "Invalid user_id",
		})
	}

	itemIDInt, err := strconv.Atoi(itemID)
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status": "!OK",
			"result": "Invalid item_id",
		})
	}

	quantityInt, err := strconv.Atoi(quantity)
	if err != nil || quantityInt <= 0 {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status": "!OK",
			"result": "Quantity must be a positive integer",
		})
	}

	// Fetch item details from the menu
	var menuItem struct {
		Name  string
		Price float64
	}
	err = s.Database.Raw("SELECT name, price FROM menu WHERE id = ?", itemIDInt).Scan(&menuItem).Error
	if err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status": "!OK",
			"result": "Item not found in the menu",
		})
	}

	// Insert the item into the cart
	err = s.Database.Exec("INSERT INTO cart (user_id, item_id, quantity, item_name, item_price) VALUES (?, ?, ?, ?, ?)",
		userIDInt, itemIDInt, quantityInt, menuItem.Name, menuItem.Price).Error

	if err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status": "!OK",
			"result": "Failed to add item to cart",
		})
	}

	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"status": "OK",
		"result": "Item successfully added to cart",
	})
}

// DeleteFromCart handles the deletion of items from the cart
func (s *Svr) DeleteFromCart(c *fiber.Ctx) error {
	userID := c.FormValue("user_id")
	itemID := c.FormValue("item_id")

	// Validate and convert input
	userIDInt, err := strconv.Atoi(userID)
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status": "!OK",
			"result": "Invalid user_id",
		})
	}

	itemIDInt, err := strconv.Atoi(itemID)
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status": "!OK",
			"result": "Invalid item_id",
		})
	}

	// Check if the item exists in the cart for the given user
	var count int64
	err = s.Database.Raw("SELECT COUNT(*) FROM cart WHERE user_id = ? AND item_id = ?", userIDInt, itemIDInt).Scan(&count).Error
	if err != nil || count == 0 {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"status": "!OK",
			"result": "Item not found in the cart",
		})
	}

	// Delete the item from the cart
	err = s.Database.Exec("DELETE FROM cart WHERE user_id = ? AND item_id = ?", userIDInt, itemIDInt).Error
	if err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status": "!OK",
			"result": "Failed to delete item from cart",
		})
	}

	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"status": "OK",
		"result": "Item successfully deleted from cart",
	})
}

// FetchCart handles fetching items in the cart for a user
func (s *Svr) FetchCart(c *fiber.Ctx) error {
	userID := c.FormValue("user_id")

	// Validate and convert input
	userIDInt, err := strconv.Atoi(userID)
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"status": "!OK",
			"result": "Invalid user_id",
		})
	}

	// Fetch all items in the cart for the given user
	var cartItems []CartItem
	err = s.Database.Raw(`
		SELECT cart.id, cart.user_id, cart.item_id, cart.quantity, menu.name AS item_name, menu.price AS item_price
		FROM cart
		JOIN menu ON cart.item_id = menu.id
		WHERE cart.user_id = ?`, userIDInt).Scan(&cartItems).Error

	if err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"status": "!OK",
			"result": "Failed to fetch cart items",
		})
	}

	if len(cartItems) == 0 {
		return c.Status(fiber.StatusOK).JSON(fiber.Map{
			"status": "OK",
			"result": "Cart is empty",
		})
	}

	// Return the cart items
	return c.Status(fiber.StatusOK).JSON(fiber.Map{
		"status": "OK",
		"result": cartItems,
	})
}
